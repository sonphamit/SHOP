@layout RootLayout
@inherits LayoutComponentBase

<Layout Sider="true">
    <LayoutSider>
        <LayoutSiderContent>
            <Bar Breakpoint="Breakpoint.Desktop" NavigationBreakpoint="Breakpoint.Tablet" ThemeContrast="ThemeContrast.Dark"
                 Mode="BarMode.VerticalInline" CollapseMode="BarCollapseMode.Small">
                <BarToggler />
                <BarBrand>
                    <BarItem>
                        <BarLink To="">
                            <BarIcon IconName="customIcon" />
                            
                        </BarLink>
                    </BarItem>
                </BarBrand>
                <NavMenu />
            </Bar>
        </LayoutSiderContent>
    </LayoutSider>
    <Layout>
        <LayoutHeader Fixed="true">
            <Bar @bind-Visible="@topbarVisible" Breakpoint="Breakpoint.Desktop" Background="Background.Primary" ThemeContrast="ThemeContrast.Light">
                <BarBrand>
                    <BarItem>
                        <BarLink To="">
                            <BarIcon IconName="IconName.Home" />
                            SHOP MANAGEMENT
                        </BarLink>
                    </BarItem>

                </BarBrand>
                <BarToggler />
                <BarMenu>
                    <BarStart>
                        
                    </BarStart>
                    <BarEnd>
                        <BarItem>
                                <LoginDisplay />
                        </BarItem>
                    </BarEnd>
                </BarMenu>
            </Bar>
        </LayoutHeader>
        <LayoutContent Padding="Padding.Is4.OnAll">
            <Blazorise.Container Fluid="true">
                @Body
            </Blazorise.Container>
        </LayoutContent>
    </Layout>
</Layout>

@code{void OnThemeEnabledChanged(bool value)
            {
                if (Theme == null)
                    return;

                Theme.Enabled = value;

                Theme.ThemeHasChanged();
            }

            void OnGradientChanged(bool value)
            {
                if (Theme == null)
                    return;

                Theme.IsGradient = value;

                //if ( Theme.GradientOptions == null )
                //    Theme.GradientOptions = new GradientOptions();

                //Theme.GradientOptions.BlendPercentage = 80;

                Theme.ThemeHasChanged();
            }

            void OnRoundedChanged(bool value)
            {
                if (Theme == null)
                    return;

                Theme.IsRounded = value;

                Theme.ThemeHasChanged();
            }

            void OnThemeColorChanged(string value)
            {
                if (Theme == null)
                    return;

                if (Theme.ColorOptions == null)
                    Theme.ColorOptions = new ThemeColorOptions();

                if (Theme.BackgroundOptions == null)
                    Theme.BackgroundOptions = new ThemeBackgroundOptions();

                if (Theme.TextColorOptions == null)
                    Theme.TextColorOptions = new ThemeTextColorOptions();

                Theme.ColorOptions.Primary = value;
                Theme.BackgroundOptions.Primary = value;
                Theme.TextColorOptions.Primary = value;

                if (Theme.InputOptions == null)
                    Theme.InputOptions = new ThemeInputOptions();

                //Theme.InputOptions.Color = value;
                Theme.InputOptions.CheckColor = value;
                Theme.InputOptions.SliderColor = value;

                Theme.ThemeHasChanged();
            }

            private bool topbarVisible = false;
            //private bool uiElementsVisible = true;

            [CascadingParameter] protected Theme Theme { get; set; }

            RenderFragment customIcon =@<img src="/brand-logo.png" style="width:32px; height: 32px" />;
}