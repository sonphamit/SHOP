@inject IShipperService service

<Modal @ref="modalRef">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <form method="post">
            <ModalHeader>
                <ModalTitle>@modalTitle</ModalTitle>
                <CloseButton Clicked="@HideModal" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="validations" Model="model" Mode="ValidationMode.Auto" ValidateOnLoad="false">
                    <Validation>
                        <Field>
                            <FieldLabel>Full Name</FieldLabel>
                            <TextEdit Placeholder="Enter Full Name..." @bind-Text="model.ShipperName">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation>
                        <Field>
                            <FieldLabel>Phone</FieldLabel>
                            <TextEdit Rows="5" Placeholder="Enter Phone..." @bind-Text="model.ShipperPhone">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>
                        </Field>
                    </Validation>
                    <Validation>
                        <Field>
                            <FieldLabel>Delivery Company</FieldLabel>
                            <Select TValue="DeliveryCompany" Multiple="false" @bind-SelectedValue="model.Company">
                                <ChildContent>
                                    @if (CompanyList != null)
                                    {
                                        @foreach (var item in CompanyList)
                                        {
                                            <SelectItem Value="@item.Key">@item.Value</SelectItem>
                                        }
                                    }
                                </ChildContent>
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </Select>
                        </Field>
                    </Validation>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
                <Button Color="Color.Primary" Clicked="@SaveChange">Save Changes</Button>
            </ModalFooter>
        </form>
        <Snackbar @ref="snackbar" Color="SnackbarColor.Danger" Location="SnackbarLocation.Right">
            <SnackbarBody>
                The input data is invalid.
            </SnackbarBody>
        </Snackbar>
    </ModalContent>
</Modal>


@code {
    [Parameter]
    public EventCallback OnSaveChange { get; set; }

    // reference to the modal component
    public Modal modalRef;
    public string modalTitle = "";

    Validations validations;
    Snackbar snackbar;

    ShipperModel model;

    List<KeyValuePair<DeliveryCompany, string>> CompanyList;

    protected override void OnInitialized()
    {
        model = new ShipperModel();
        GetAllDeliverCompany();
    }

    private void SaveChange()
    {
        if (validations.ValidateAll())
        {
            if (String.IsNullOrWhiteSpace(model.Id))
            {
                service.AddAsync(model);
            }
            else
            {
                service.Update(model.Id, model);
            }

            OnSaveChange.InvokeAsync();

            HideModal();
        }
        else
        {
            snackbar.Show();
        }
    }

    public void AddModal()
    {
        model = new ShipperModel();
        modalTitle = "Add Shipper";
        modalRef.Show();
    }

    public void EditModal(string id)
    {
        modalTitle = "Edit Shipper";
        this.model = GetById(id);
        modalRef.Show();
    }

    public ShipperModel GetById(string id)
    {
        var responseModel = service.GetById(id);
        return responseModel;
    }

    public void HideModal()
    {
        modalRef.Hide();
    }

    public void GetAllDeliverCompany()
    {
        CompanyList = EnumHelper.GetEnumAndDescriptions<DeliveryCompany>();
    }

}
