@inject IShipperService service

<Modal @ref="modalRef">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <form method="post">
            <ModalHeader>
                <ModalTitle>@modalTitle</ModalTitle>
                <CloseButton Clicked="@HideModal" />
            </ModalHeader>
            <ModalBody>
                <Field>
                    <FieldLabel>Full Name</FieldLabel>
                    <TextEdit Placeholder="Enter Full Name..." @bind-Text="model.ShipperName" />
                </Field>
                <Field>
                    <FieldLabel>Phone</FieldLabel>
                    <TextEdit Rows="5" Placeholder="Enter Phone..." @bind-Text="model.ShipperPhone" />
                </Field>
                <Field>
                    <FieldLabel>Delivery Company</FieldLabel>
                    <Select TValue="DeliveryCompany" Multiple="false" @bind-SelectedValue="model.Company" >
                        @if (CompanyList != null)
                        {
                            @foreach (var item in CompanyList)
                            {
                                <SelectItem Value="@item.Key">@item.Value</SelectItem>
                            }
                        }
                    </Select>
                </Field>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
                <Button Color="Color.Primary" Clicked="@SaveChange">Save Changes</Button>
            </ModalFooter>
        </form>
    </ModalContent>
</Modal>


@code {
    [Parameter]
    public EventCallback OnSaveChange { get; set; }

    // reference to the modal component
    public Modal modalRef;
    public string modalTitle = "";

    ShipperModel model;

    List<KeyValuePair<DeliveryCompany, string>> CompanyList;

    protected override void OnInitialized()
    {
        model = new ShipperModel();
        GetAllDeliverCompany();
    }

    private void SaveChange()
    {
        if (String.IsNullOrWhiteSpace(model.Id))
        {
            service.AddAsync(model);
        }
        else
        {
            service.Update(model.Id, model);
        }

        OnSaveChange.InvokeAsync();

        HideModal();

    }

    public void AddModal()
    {
        model = new ShipperModel();
        modalTitle = "Add Shipper";
        modalRef.Show();
    }

    public void EditModal(ShipperModel model)
    {
        modalTitle = "Edit Shipper";
        this.model = model;
        modalRef.Show();
    }

    public void HideModal()
    {
        modalRef.Hide();
    }

    public void GetAllDeliverCompany()
    {
        CompanyList = EnumHelper.GetEnumAndDescriptions<DeliveryCompany>();
    }

}
