@page "/shippers"
@inject IShipperService service
@inject IJSRuntime JsRuntime

<div class="row mb-4 mt-4">
    <div class="col-10">
        <h3 class="mr-5">Shipper</h3>
        <ShipperDetail @ref="child" OnSaveChange="@(async () => await GetAllAsync())" />
        <Button Color="Color.Primary" Size="Size.Medium" Clicked="@AddModal">
            <Icon Name="IconName.Add" />
            Add
        </Button>
    </div>
    <div class="col-2">

    </div>
</div>




<table class="table table-striped table-bordered table-hover">
    <thead>
        <tr>
            <th>No.</th>
            <th>Name</th>
            <th>Phone</th>
            <th>Company</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (data != null)
        {
            @foreach (var item in data.Select((value, index) => new { value, index }))
            {
                <tr>
                    <td>@(item.index+1)</td>
                    <td>@item.value.ShipperName</td>
                    <td>@item.value.ShipperPhone</td>
                    <td>@item.value.Company.GetDescription()</td>
                    <td>
                        <Button Color="Color.Primary" Size="Size.Small" Clicked="@(() => EditModal(item.value))">
                            <Icon Name="IconName.Edit" />
                            Edit
                        </Button>
                        <Button Color="Color.Danger" Size="Size.Small" Clicked="@(async () => await Delete(item.value))">
                            <Icon Name="IconName.Delete" />
                            Delete
                        </Button>
                    </td>
                </tr>
            }
        }

    </tbody>
</table>


@code {

    ShipperDetail child;
    void AddModal()
    {
        child.AddModal();
    }

    void EditModal(ShipperModel model)
    {
        child.EditModal(model);
    }

    public IEnumerable<ShipperModel> data;
    int total = 0;
    protected override async Task OnInitializedAsync()
    {
        //categories = new List<CategoryModel>();
        await GetAllAsync();

    }

    async Task Delete(ShipperModel model)
    {
        if (!await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{model.ShipperName}'?"))
        {
            return;
        }


        await service.DeleteAsync(model.Id);
        await service.SaveChangesAsync();
        data = await service.GetAllAsync();
    }

    public async Task GetAllAsync()
    {
        data = await service.GetAllAsync();
        total = data.Count();
    }

}
