@inject IRoleService service

<Modal @ref="modalRef">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@modalTitle</ModalTitle>
                <CloseButton Clicked="@HideModal" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="validations" Mode="ValidationMode.Auto" Model="@model"
                             ValidateOnLoad="false">
                    <Validation>
                        <Field>
                            <FieldLabel>Name</FieldLabel>
                            <TextEdit Placeholder="Enter name..." @bind-Text="model.Name" ChangeTextOnKeyPress="true" KeyPress="OnDirty">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </TextEdit>

                        </Field>
                    </Validation>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
                <Button Type="ButtonType.Submit" PreventDefaultOnSubmit="true" Disabled="isDisabled"
                        Color="Color.Primary" Clicked="@(async () => await Submit())">
                    Save Changes
                </Button>
            </ModalFooter>
        </Form>
        <Snackbar @ref="snackbar" Color="SnackbarColor.Danger" Location="SnackbarLocation.Right">
            <SnackbarBody>
                The input data is invalid.
            </SnackbarBody>
        </Snackbar>
    </ModalContent>
</Modal>


@code {

    [Parameter]
    public EventCallback OnSaveChange { get; set; }

    // reference to the modal component
    public Modal modalRef;
    public string modalTitle = "";

    Validations validations;

    private bool isDisabled = true;

    Snackbar snackbar;

    RoleModel model = new();
    protected override void OnInitialized()
    {
        model = new RoleModel();
    }

    private async Task Submit()
    {
        if (validations.ValidateAll())
        {
            if (String.IsNullOrWhiteSpace(model.Id))
            {
                await service.AddRoleAsync(model);
            }
            else
            {
                await service.UpdateAsync(model.Id, model.Name);
            }

            await OnSaveChange.InvokeAsync();

            HideModal();
        }
        else
        {
            snackbar.Show();
        }
    }

    void OnDirty()
    {
        isDisabled = false;
    }

    public void AddModal()
    {

        model = new RoleModel();
        modalTitle = "Add Role";
        modalRef.Show();
    }

    public void EditModal(RoleModel model)
    {
        modalTitle = "Edit Role";
        this.model = model;
        modalRef.Show();
    }

    public void HideModal()
    {
        model = new RoleModel();
        isDisabled = true;
        modalRef.Hide();
    }

}
