@page "/products"
@inject IProductService productService
@inject IJSRuntime JsRuntime

<div class="row mb-4 mt-4">
    <div class="col-10">
        <h3 class="mr-5">Product</h3>
        <ProductDetail @ref="child" OnSaveChange="@(async () => await GetAllAsync())"  />
        <Button Color="Color.Primary" Size="Size.Medium" Clicked="@AddModal">
            <Icon Name="IconName.Add" />
            Add
        </Button>
    </div>
    <div class="col-2">

    </div>
</div>

<table class="table table-striped table-bordered table-hover">
    <thead>
        <tr>
            <th>No.</th>
            <th>Name</th>
            <th>UnitPrice</th>
            <th>UnitsInStock</th>
            <th>UnitsOnOrder</th>
            <th>Category</th>
            <th>Supplier</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (products != null)
        {
            @foreach (var item in products.Select((value, index) => new { value, index }))
                {
        <tr>
            <td>@(item.index + 1)</td>
            <td>@item.value.Name</td>
            <td>@item.value.UnitPrice</td>
            <td>@item.value.UnitsInStock</td>
            <td>@item.value.UnitsOnOrder</td>
            <td>@item.value.Category?.Name</td>
            <td>@item.value.Supplier?.CompanyName</td>

            <td>
                <Button Color="Color.Primary" Size="Size.Small" Clicked="@(() => EditModal(item.value))">
                    <Icon Name="IconName.Edit" />
                    Edit
                </Button>
                <Button Color="Color.Danger" Size="Size.Small" Clicked="@(async () => await Delete(item.value))">
                    <Icon Name="IconName.Delete" />
                    Delete
                </Button>
            </td>
        </tr>
                }
        }
    </tbody>
</table>


@code {

    ProductDetail child;
    void AddModal()
    {
        child.AddModal();
    }

    void EditModal(ProductModel model)
    {
        child.EditModal(model);
    }

    public IEnumerable<ProductModel> products;
    int total = 0;
    protected override async Task OnInitializedAsync()
    {

        await GetAllAsync();

    }

    async Task Delete(ProductModel model)
    {
        if (!await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{model.Name}'?"))
        {
            return;
        }

        await productService.DeleteAsync(model);
        await productService.SaveChangesAsync();
        products = await productService.GetAllAsync();
    }

    public async Task GetAllAsync()
    {
        products = await productService.GetAllAsync();
        total = products.Count();
    }

}
