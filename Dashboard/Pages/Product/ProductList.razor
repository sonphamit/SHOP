@page "/products"
@inject IProductService productService
@inject ICategoryService categoryService
@inject ISupplierService supplierService
@inject IJSRuntime JsRuntime

<div class="row">
    <div class="col-10">
        <h3 class="mr-5">Product</h3>
        <ProductDetail @ref="child" OnSaveChange="@(async () => await GetAllAsync())" />
        <Button Color="Color.Primary" Size="Size.Medium" Clicked="@AddModal">
            <Icon Name="IconName.Add" />
            Add
        </Button>
    </div>
    <div class="col-2">

    </div>
</div>

<div class="row mb-4 mt-4">
    <div class="col-2">
        <Addons>
            <Addon AddonType="AddonType.Start">
                <AddonLabel>Gender</AddonLabel>
            </Addon>
            <Addon AddonType="AddonType.Body">
                <Select TValue="Gender" Multiple="false" SelectedValue="@selectedGender" SelectedValueChanged="@genderOnChange">
                    @if (GenderList != null)
                    {
                        @foreach (var item in GenderList)
                        {
                            <SelectItem Value="@item.Key">@item.Value</SelectItem>
                        }
                    }
                </Select>
            </Addon>
        </Addons>

    </div>
    <div class="col-3">
        <Addons>
            <Addon AddonType="AddonType.Start">
                <AddonLabel>Category</AddonLabel>
            </Addon>
            <Addon AddonType="AddonType.Body">
                <Select TValue="string" Multiple="false" SelectedValue="@selectedCategory" SelectedValueChanged="@categoryOnChange">
                    @if (categories != null)
                    {
                        <SelectItem Value="@(String.Empty)">Select All</SelectItem>
                        @foreach (var item in categories)
                        {
                            <SelectItem Value="@item.Id">@item.Name</SelectItem>
                        }
                    }
                </Select>
            </Addon>
        </Addons>
    </div>
    <div class="col-3">
        <Addons>
            <Addon AddonType="AddonType.Start">
                <AddonLabel>Supplier</AddonLabel>
            </Addon>
            <Addon AddonType="AddonType.Body">
                <Select TValue="string" Multiple="false" SelectedValue="@selectedSupplier" SelectedValueChanged="@supplierOnChange">
                    @if (suppliers != null)
                    {
                        <SelectItem Value="@(String.Empty)">Select All</SelectItem>
                        @foreach (var item in suppliers)
                        {
                            <SelectItem Value="@item.Id">@item.CompanyName</SelectItem>
                        }
                    }
                </Select>
            </Addon>
        </Addons>
    </div>
    <div class="col-4">
        <Addons>
            <Addon AddonType="AddonType.Start">
                <AddonLabel><Icon Name="IconName.Search" /></AddonLabel>
            </Addon>
            <Addon AddonType="AddonType.Body">
                <TextEdit Placeholder="Search" TextChanged="keywordOnChange"></TextEdit>
            </Addon>
        </Addons>
    </div>
</div>

<table class="table table-striped table-bordered table-hover">
    <thead>
        <tr>
            <th>No.</th>
            <th>Name</th>
            <th>Code</th>
            <th>Gender</th>
            <th>UnitPrice</th>
            <th>UnitsInStock</th>
            <th>UnitsOnOrder</th>
            <th>Category</th>
            <th>Supplier</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @if (products != null)
        {
            @foreach (var item in products.Select((value, index) => new { value, index }))
            {
                <tr>
                    <td>@(item.index + 1 + pageSize*(pageNumber-1))</td>
                    <td>@item.value.Name</td>
                    <td>@item.value.ProductionCode</td>
                    <td>@item.value.Gender</td>
                    <td>@item.value.UnitPrice</td>
                    <td>@item.value.UnitsInStock</td>
                    <td>@item.value.UnitsOnOrder</td>
                    <td>@item.value.Category?.Name</td>
                    <td>@item.value.Supplier?.CompanyName</td>

                    <td>
                        <Button Color="Color.Primary" Size="Size.Small" Clicked="@(() => EditModal(item.value.Id))">
                            <Icon Name="IconName.Edit" />
                            Edit
                        </Button>
                        <Button Color="Color.Danger" Size="Size.Small" Clicked="@(async () => await Delete(item.value))">
                            <Icon Name="IconName.Delete" />
                            Delete
                        </Button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>
@if (lastPage > 0)
{
    <Pagination>
        <PaginationItem Disabled="@(pageNumber == 1)">
            <PaginationLink Clicked="preOnClick">
                <span aria-hidden="true">«</span>
            </PaginationLink>
        </PaginationItem>

        @if (lastPage >= 1)
        {
            @foreach (var pg in Enumerable.Range(1, lastPage).ToArray())
            {
                <PaginationItem Active="@(pageNumber == pg)">
                    <PaginationLink Clicked="@(async () => await pageOnClick(pg))">
                        @pg
                    </PaginationLink>
                </PaginationItem>
            }
        }
        <PaginationItem Disabled="@(pageNumber == lastPage)">
            <PaginationLink Clicked="nextOnClick" Page="Page.">
                <span aria-hidden="true">»</span>
            </PaginationLink>
        </PaginationItem>
    </Pagination>
}

@code {

    List<KeyValuePair<Gender, string>> GenderList;
    public IEnumerable<CategoryModel> categories;
    public IEnumerable<SupplierModel> suppliers;

    public void GetAllGender()
    {
        GenderList = EnumHelper.GetEnumAndDescriptions<Gender>();
    }

    ProductDetail child;
    void AddModal()
    {
        child.AddModal();
    }

    void EditModal(string id)
    {
        child.EditModal(id);
    }

    public IEnumerable<ProductResponseModel> products;
    int total = 0;
    protected override async Task OnInitializedAsync()
    {
        await GetAllAsync();
        GetAllGender();
        categories = await categoryService.GetAllAsync();
        suppliers = await supplierService.GetAllAsync();
    }

    async Task Delete(ProductModel model)
    {
        if (!await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{model.Name}'?"))
        {
            return;
        }

        await productService.DeleteAsync(model.Id);
        await productService.SaveChangesAsync();
        products = await productService.GetAllAsync();
    }

    public async Task GetAllAsync()
    {
        await Search();
    }

    #region PAGINATION

    string selectedCategory = String.Empty;
    string selectedSupplier = String.Empty;
    Gender selectedGender = Gender.ALL;
    string searchKeyword = String.Empty;
    int pageNumber = 1;

    int pageSize = 10;
    string orderCol = nameof(ProductModel.Name);
    string orderType = "asc"; //or desc

    int lastPage = 0;
    public async Task Search()
    {
        var result = await productService.Search(
            selectedCategory, selectedSupplier,
            selectedGender, searchKeyword,
            orderCol, orderType,
            pageNumber, pageSize
            );
        products = result.Items;
        total = result.Count;
        lastPage = (int)Math.Ceiling((decimal)total / pageSize);
    }

    async Task genderOnChange(Gender value)
    {
        selectedGender = value;
        await Search();
    }

    async Task categoryOnChange(string value)
    {
        selectedCategory = value;
        await Search();
    }

    async Task supplierOnChange(string value)
    {
        selectedSupplier = value;
        await Search();
    }

    async Task keywordOnChange(string value)
    {
        searchKeyword = value;
        await Search();
    }

    async Task preOnClick()
    {
        if (pageNumber > 1)
        {
            pageNumber = pageNumber - 1;
        }

        await Search();
    }

    async Task nextOnClick()
    {
        if (pageNumber < lastPage)
        {
            pageNumber = pageNumber + 1;
        }

        await Search();
    }

    async Task pageOnClick(int value)
    {
        pageNumber = value;
        await Search();
    }

    #endregion
}
