@inject IProductService productService
﻿@using System.IO;
@using Microsoft.AspNetCore.Hosting;
@inject IProductService productService
@inject ICategoryService categoryService
@inject ISupplierService supplierService
@inject IWebHostEnvironment _env;

<Modal @ref="modalRef">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <form method="post">
            <ModalHeader>
                <ModalTitle>@modalTitle</ModalTitle>
                <CloseButton Clicked="@HideModal" />
            </ModalHeader>
            <ModalBody>
                <Field>
                    <FieldLabel>Name</FieldLabel>
                    <TextEdit Placeholder="Enter name..." @bind-Text="model.Name" />
                </Field>
                <Field>
                    <FieldLabel>Unit Price</FieldLabel>
                    <NumericEdit Placeholder="Enter Unit Price" @bind-Value="model.UnitPrice" />
                </Field>
                <Field>
                    <FieldLabel>Units In Stock</FieldLabel>
                    <NumericEdit Placeholder="Enter Unit Price" @bind-Value="model.UnitsInStock" />
                </Field>
                <Field>
                    <FieldLabel>Category</FieldLabel>
                    <Select TValue="string" Multiple="false" @bind-SelectedValue="model.CategoryId">
                        @if (categories != null)
                        {
                            @foreach (var item in categories)
                            {
                                <SelectItem Value="@item.Id">@item.Name</SelectItem>
                            }
                        }
                    </Select>
                </Field>
                <Field>
                    <FieldLabel>Supplier</FieldLabel>
                    <Select TValue="string" Multiple="false" @bind-SelectedValue="model.SupplierId">
                        @if (suppliers != null)
                        {
                            @foreach (var item in suppliers)
                            {
                                <SelectItem Value="@item.Id">@item.CompanyName</SelectItem>
                            }
                        }
                    </Select>
                </Field>
                <Field>
                    <FieldLabel>Images</FieldLabel>
                    <div>
                        <div class="dropArea @dropClass">
                            Drag and drop your files here or click to open file loading dialogue...
                            <InputFile id="inputDrop"
                                       OnChange="OnInputFileChange"
                                       @ondragenter="HandleDragEnter"
                                       @ondragleave="HandleDragLeave"
                                       multiple />
                        </div>

                        <ol class="list-image">
                            @if (images != null && images.Any())
                            {
                                @foreach (var image in images)
                                {

                                    <li class="mt-2">
                                        <a href="@image.Key" target="_blank"> @image.Value</a>
                                    </li>
                                }
                            }

                            @*@if (model.Images != null && model.Images.Any())
                                {
                                    @foreach (var image in model.Images)
                                    {

                                        <li class="mt-2">
                                            <a href="@" target="_blank"> @image.Value.Name </a>
                                        </li>
                                    }
                                }*@
                        </ol>

                    </div>
                </Field>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
                <Button Color="Color.Primary" Clicked="@(async () => await SaveChangeAsync())">Save Changes</Button>
            </ModalFooter>
        </form>
    </ModalContent>
</Modal>


@code {
    [Parameter]
    public EventCallback OnSaveChange { get; set; }

    // reference to the modal component
    public Modal modalRef;
    public string modalTitle = "";

    ProductModel model;


    public IEnumerable<CategoryModel> categories;
    public IEnumerable<SupplierModel> suppliers;

    //upload file
    IReadOnlyList<IBrowserFile> files;

    List<string> urls = new List<string>();

    Dictionary<string, string> images = new Dictionary<string, string>();



    string dropClass = string.Empty;
    const int maxFileSize = 10485760;


    protected override async Task OnInitializedAsync()
    {
        await GetAllAsync();
    }

    protected override void OnInitialized()
    {
        model = new ProductModel();
    }

    private async Task SaveChangeAsync()
    {
        if (images.Values.Any())
        {
            foreach (var image in images)
            {

                model.Images.Add(new ResourceModel
                {
                    Id = Guid.NewGuid().ToString(),
                    PathName = image.Key,
                    IsDeleted = false,
                    ProductId = model.Id
                });
            }
        }

        if (String.IsNullOrWhiteSpace(model.Id))
        {
            try
            {
                await productService.AddAsync(model);
            }
            catch(Exception e)
            {
                throw e;
            }

            await OnSaveChange.InvokeAsync();
        }
        else
        {

            var a = await productService.UpdateAsync(model.Id, model);

            if (a)
            {
                await OnSaveChange.InvokeAsync();
            }
        }
        HideModal();

    }

    public void AddModal()
    {
        model = new ProductModel();
        modalTitle = "Add product";
        images.Clear();
        modalRef.Show();
    }

    public void EditModal(ProductModel model)
    {
        modalTitle = "Edit product";
        this.model = new ProductModel();

        model.Images.ForEach(item => {
            images.Add(item.PathName, item.PathName.Split("_").Last());
        });


        modalRef.Show();
    }

    public void HideModal()
    {
        //images.Clear();
        //files = null;
        modalRef.Hide();
    }


    public async Task GetAllAsync()
    {
        categories = await categoryService.GetAllAsync();
        suppliers = await supplierService.GetAllAsync();
    }

    private void HandleDragEnter()
    {
        dropClass = "dropAreaDrug";
    }
    private void HandleDragLeave()
    {
        dropClass = string.Empty;
    }
    async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        dropClass = string.Empty;
        try
        {
            if (e.FileCount > 0)
            {
                //urls.Clear();
                files = null;
                files = e.GetMultipleFiles();
                await SaveFiles(files);
                //urls.AddRange(images);
            }

        }

        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine(ex.Message);
            throw;
        }
    }

    private async Task SaveFiles(IReadOnlyList<IBrowserFile> files)
    {

        foreach (var file in files)
        {
            var url = await SaveFile(file);
            images.Add(url, file.Name);
        }
    }

    private async Task<string> SaveFile(IBrowserFile file)
    {
        var relativePath = Path.Combine("images/products");
        var dirToSave = Path.Combine(_env.WebRootPath, relativePath);
        var di = new DirectoryInfo(dirToSave);


        if (!di.Exists)
        {
            di.Create();
        }

        var createFileName = $"{DateTime.UtcNow.ToString("ddMMyyyyss")}_{file.Name}";

        var filePath = Path.Combine(dirToSave, createFileName);
        using (var stream = file.OpenReadStream(maxFileSize))
        {
            using (var mstream = new MemoryStream())
            {
                await stream.CopyToAsync(mstream);
                await File.WriteAllBytesAsync(filePath, mstream.ToArray());
            }
        }
        var url = Path.Combine(relativePath, createFileName).Replace("\\", "/");
        return url;
    }

}
