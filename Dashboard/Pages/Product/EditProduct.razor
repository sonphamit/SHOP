@inject IProductService productService
@inject ICategoryService categoryService

<Modal @ref="modalRef">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <form method="post">
            <ModalHeader>
                <ModalTitle>@modalTitle</ModalTitle>
                <CloseButton Clicked="@HideModal" />
            </ModalHeader>
            <ModalBody>
                <Field>
                    <FieldLabel>Name</FieldLabel>
                    <TextEdit Placeholder="Enter name..." @bind-Text="model.Name" />
                </Field>
                @*<Field>
                        <FieldLabel>UnitPrice</FieldLabel>
                        <MemoEdit Rows="5" Placeholder="Enter Unit Price" @bind-Text="model.UnitPrice.ToString()"  />
                    </Field>
                    <Field>
                        <FieldLabel>UnitsInStock</FieldLabel>
                        <MemoEdit Rows="5" Placeholder="Enter Unit In Stock..." @bind-Text="model.UnitsInStock.ToString()" />
                    </Field>
                    <Field>
                        <FieldLabel>UnitsOnOrder</FieldLabel>
                        <MemoEdit Rows="5" Placeholder="Enter UnitsOnOrder..." @bind-Text="model.UnitsOnOrder.ToString()" />
                    </Field>*@
                <Field>
                    <FieldLabel>UnitPrice</FieldLabel>
                    <Dropdown @bind-Text="model.Category">
                        <DropdownToggle Color="Color.Primary">
                            Dropdown
                        </DropdownToggle>
                        <DropdownMenu>
                            @if (categories != null)
                            {
                                @foreach (var item in categories)
                                {
                                    <DropdownItem Value="1">@item.Name</DropdownItem>
                                    <DropdownDivider />
                                }
                            }
                         </DropdownMenu>
                    </Dropdown>
                </Field>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
                <Button Color="Color.Primary" Clicked="@SaveChange">Save Changes</Button>
            </ModalFooter>
        </form>
    </ModalContent>
</Modal>


@code {
    [Parameter] public EventCallback OnSaveChange { get; set; }

    // reference to the modal component
    public Modal modalRef;
    public string modalTitle = "";

    ProductModel model;


    public IEnumerable<CategoryModel> categories;
    int total = 0;
    protected override async Task OnInitializedAsync()
    {
        //categories = new List<CategoryModel>();
        await GetAllAsync();

    }
    protected override void OnInitialized()
    {
        model = new ProductModel();
    }

    private void SaveChange()
    {
        if (String.IsNullOrWhiteSpace(model.Id))
        {
            productService.AddAsync(model);
        }
        else
        {
            productService.Update(model.Id, model);
        }

        OnSaveChange.InvokeAsync();

        HideModal();

    }

    public void AddModal()
    {
        model = new ProductModel();
        modalTitle = "Add product";
        modalRef.Show();
    }

    public void EditModal(ProductModel model)
    {
        modalTitle = "Edit product";
        this.model = model;
        modalRef.Show();
    }

    public void HideModal()
    {
        modalRef.Hide();
    }


    public async Task GetAllAsync()
    {
        categories = await categoryService.GetAllAsync();
        total = categories.Count();
    }

}
