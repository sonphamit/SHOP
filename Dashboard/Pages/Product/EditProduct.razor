@inject IProductService productService
@inject ICategoryService categoryService

<Modal @ref="modalRef">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <form method="post">
            <ModalHeader>
                <ModalTitle>@modalTitle</ModalTitle>
                <CloseButton Clicked="@HideModal" />
            </ModalHeader>
            <ModalBody>
                <Field>
                    <FieldLabel>Name</FieldLabel>
                    <TextEdit Placeholder="Enter name..." @bind-Text="model.Name" />
                </Field>
                <Field>
                    <FieldLabel>UnitPrice</FieldLabel>
                    <NumericEdit Placeholder="Enter Unit Price" @bind-Value="model.UnitPrice" />
                </Field>
                <Field>
                    <FieldLabel>UnitsInStock</FieldLabel>
                    <NumericEdit Placeholder="Enter Unit Price" @bind-Value="model.UnitsInStock" />
                </Field>
                <Field>
                    <FieldLabel>Category</FieldLabel>
                    <Select TValue="string" Multiple="false" @bind-SelectedValue="model.CategoryId">
                        @if (categories != null)
                        {
                            @foreach (var item in categories)
                            {
                                <SelectItem Value="@item.Id">@item.Name</SelectItem>
                            }
                        }
                    </Select>
                </Field>
                <Field>
                    <FileEdit Filter="image/jpeg, image/png, image/gif" />
                </Field>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
                <Button Color="Color.Primary" Clicked="@(async () => await SaveChangeAsync())">Save Changes</Button>
            </ModalFooter>
        </form>
    </ModalContent>
</Modal>


@code {
    [Parameter] public EventCallback OnSaveChange { get; set; }

    // reference to the modal component
    public Modal modalRef;
    public string modalTitle = "";

    ProductModel model;

    public IEnumerable<CategoryModel> categories;
    int total = 0;
    protected override async Task OnInitializedAsync()
    {
        //categories = new List<CategoryModel>();
        await GetAllAsync();
    }

    protected override void OnInitialized()
    {
        model = new ProductModel();
    }

    private async Task SaveChangeAsync()
    {
        if (String.IsNullOrWhiteSpace(model.Id))
        {
            await productService.AddAsync(model);
            await OnSaveChange.InvokeAsync();
        }
        else
        {
            var a = await productService.UpdateAsync(model.Id, model);
            if (a)
            {
                await OnSaveChange.InvokeAsync();
            }
        }

        HideModal();

    }



    public void AddModal()
    {
        model = new ProductModel();
        modalTitle = "Add product";
        modalRef.Show();
    }

    public void EditModal(ProductModel model)
    {
        modalTitle = "Edit product";
        this.model = model;
        modalRef.Show();
    }

    public void HideModal()
    {
        modalRef.Hide();
    }


    public async Task GetAllAsync()
    {
        categories = await categoryService.GetAllAsync();
        total = categories.Count();
    }

}
