@inject IEmployeeService service
@inject IMapper _mapper

<Modal @ref="modalRef">
    <ModalBackdrop />
    <ModalContent IsCentered="true" Size="ModalSize.Large">
        <form method="post">
            <ModalHeader>
                <ModalTitle>@modalTitle</ModalTitle>
                <CloseButton Clicked="@HideModal" />
            </ModalHeader>
            <ModalBody>

                <Validations @ref="validations" Model="model" Mode="ValidationMode.Auto" ValidateOnLoad="false">
                    <Validation>
                        <Field Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.Is3">UserName</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is9">
                                <TextEdit Placeholder="Enter UserName" @bind-Text="model.ApplicationUser.UserName"
                                          MaskType="MaskType.RegEx" EditMask="^[a-zA-Z][a-zA-Z0-9]*$" MaxLength="20">
                                    <Feedback><ValidationError /></Feedback>
                                </TextEdit>
                            </FieldBody>
                        </Field>
                    </Validation>

                    <Validation>
                        <Field Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.Is3">Password</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is9">
                                <TextEdit Placeholder="Enter Password" @bind-Text="model.Password" Role="TextRole.Password">
                                    <Feedback><ValidationError /></Feedback>
                                </TextEdit>
                            </FieldBody>
                        </Field>
                    </Validation>

                    <Validation>
                        <Field Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.Is3">Confirm</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is9">
                                <TextEdit Placeholder="Enter Confirm Password" @bind-Text="model.ConfirmPassword" Role="TextRole.Password">
                                    <Feedback><ValidationError /></Feedback>
                                </TextEdit>
                            </FieldBody>
                        </Field>
                    </Validation>

                    <Validation>
                        <Field Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.Is3">FirstName</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is9">
                                <TextEdit Placeholder="Enter FirstName" @bind-Text="model.ApplicationUser.FirstName">
                                    <Feedback><ValidationError /></Feedback>
                                </TextEdit>
                            </FieldBody>
                        </Field>
                    </Validation>

                    <Validation>
                        <Field Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.Is3">MiddleName</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is9">
                                <TextEdit Placeholder="Enter MiddleName" @bind-Text="model.ApplicationUser.MiddleName">
                                    <Feedback><ValidationError /></Feedback>
                                </TextEdit>
                            </FieldBody>
                        </Field>
                    </Validation>

                    <Validation>
                        <Field Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.Is3">Last Name</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is9">
                                <TextEdit Placeholder="Enter Last Name" @bind-Text="model.ApplicationUser.LastName">
                                    <Feedback><ValidationError /></Feedback>
                                </TextEdit>
                            </FieldBody>
                        </Field>
                    </Validation>

                    <Validation>
                        <Field Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.Is3">Email</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is9">
                                <TextEdit Placeholder="Enter Email" @bind-Text="model.ApplicationUser.Email" Role="TextRole.Email">
                                    <Feedback><ValidationError /></Feedback>
                                </TextEdit>
                            </FieldBody>
                        </Field>
                    </Validation>
                    <Validation>
                        <Field Horizontal="true">
                            <FieldLabel ColumnSize="ColumnSize.Is3">Phone</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is9">
                                <TextEdit Placeholder="Enter Phone Number" @bind-Text="model.ApplicationUser.PhoneNumber"
                                          MaxLength="13" MaskType="MaskType.RegEx" EditMask="^[+84]?[0-9]*$">
                                    <Feedback><ValidationError /></Feedback>
                                </TextEdit>
                            </FieldBody>
                        </Field>
                    </Validation>
                </Validations>
                
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
                <Button Color="Color.Primary" Clicked="@(async () => await SaveChangeAsync())">
                    Save Changes
                </Button>
            </ModalFooter>
        </form>
        <Snackbar @ref="snackbar" Color="SnackbarColor.Danger" Location="SnackbarLocation.Right">
            <SnackbarBody>
                @SnackbarText
            </SnackbarBody>
        </Snackbar>


    </ModalContent>
</Modal>

@code {
    [Parameter]
    public EventCallback OnSaveChange { get; set; }

    // reference to the modal component
    public Modal modalRef;
    public string modalTitle = "";

    public string SnackbarText = "The input data is invalid.";

    EmployeeRequestModel model;

    Validations validations;

    Snackbar snackbar;

    protected override void OnInitialized()
    {
        model = new EmployeeRequestModel();
        //model.User = new ApplicationUserModel();
    }

    private async Task SaveChangeAsync()
    {


        if (validations.ValidateAll())
        {

            if (String.IsNullOrWhiteSpace(model.Id))
            {
                bool isExsist = await service.IsExsistAsync(model.ApplicationUser.UserName);
                if (isExsist)
                {
                    SnackbarText = $"UserName {model.ApplicationUser.UserName} is Exsisting, please pick another one.";
                    snackbar.Show();
                    return;
                }
                await service.AddAsync(model);
                await OnSaveChange.InvokeAsync();
            }
            else
            {

                await service.UpdateAsync(model.Id, model);
                await OnSaveChange.InvokeAsync();
            }
            HideModal();
        }
        else
        {
            SnackbarText = "The input data is invalid.";
            snackbar.Show();
        }
    }

    public void AddModal()
    {
        model = new EmployeeRequestModel();
        //model.User = new ApplicationUserModel();
        modalTitle = "Add employee";
        modalRef.Show();
    }

    public async Task<EmployeeRequestModel> GetById(string id)
    {
        var responseModel = await service.GetByIdAsync(id);
        return _mapper.Map<EmployeeRequestModel>(responseModel);
    }

    public async Task EditModal(string employeeId)
    {
        modalTitle = "Edit employee";

        model = await GetById(employeeId);

        modalRef.Show();
    }

    public void HideModal()
    {
        modalRef.Hide();
    }

}
