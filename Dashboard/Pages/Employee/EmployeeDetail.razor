@inject IEmployeeService service
@inject IMapper _mapper

<Modal @ref="modalRef">
    <ModalBackdrop />
    <ModalContent IsCentered="true" Size="ModalSize.Large">
        <form method="post">
            <ModalHeader>
                <ModalTitle>@modalTitle</ModalTitle>
                <CloseButton Clicked="@HideModal" />
            </ModalHeader>
            <ModalBody>

                    <Validations @ref="validations" Model="model" Mode="ValidationMode.Auto" ValidateOnLoad="false">
                        <Validation>
                            <Field Horizontal="true">
                                <FieldLabel ColumnSize="ColumnSize.Is2">UserName</FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is10">
                                    <TextEdit Placeholder="Enter UserName" @bind-Text="model.User.UserName" 
                                              MaskType="MaskType.RegEx" EditMask="^[a-zA-Z][a-zA-Z0-9]*$" MaxLength="20">
                                        <Feedback><ValidationError /></Feedback>
                                    </TextEdit>
                                </FieldBody>
                            </Field>
                        </Validation>

                        <Validation>
                            <Field Horizontal="true">
                                <FieldLabel ColumnSize="ColumnSize.Is2">Password</FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is10">
                                    <TextEdit Placeholder="Enter Password" @bind-Text="model.Password" Role="TextRole.Password">
                                        <Feedback><ValidationError /></Feedback>
                                    </TextEdit>
                                </FieldBody>
                            </Field>
                        </Validation>

                        <Validation>
                            <Field Horizontal="true">
                                <FieldLabel ColumnSize="ColumnSize.Is2">Confirm</FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is10">
                                    <TextEdit Placeholder="Enter Confirm Password" @bind-Text="model.ConfirmPassword" Role="TextRole.Password">
                                        <Feedback><ValidationError /></Feedback>
                                    </TextEdit>
                                </FieldBody>
                            </Field>
                        </Validation>

                        <Fields>
                            <Validation Validator="@ValidationRule.IsNotEmpty">
                                <Field ColumnSize="ColumnSize.Is4">
                                    <FieldLabel>FirstName</FieldLabel>
                                    <FieldBody>
                                        <TextEdit Placeholder="Enter FirstName" @bind-Value="model.User.FirstName">
                                            <Feedback><ValidationError /></Feedback>
                                        </TextEdit>
                                    </FieldBody>
                                </Field>
                            </Validation>
                            <Validation>
                                <Field ColumnSize="ColumnSize.Is4">
                                    <FieldLabel>MiddleName</FieldLabel>
                                    <FieldBody ColumnSize="ColumnSize.Is10">
                                        <TextEdit Placeholder="Enter MiddleName" @bind-Value="model.User.MiddleName" Min="0" Max="100">
                                            <Feedback><ValidationError /></Feedback>
                                        </TextEdit>
                                    </FieldBody>
                                </Field>
                            </Validation>
                            <Validation Validator="@ValidationRule.IsNotEmpty">
                                <Field ColumnSize="ColumnSize.Is4">
                                    <FieldLabel>LastName</FieldLabel>
                                    <FieldBody>
                                        <TextEdit Placeholder="Enter LastName" @bind-Value="model.User.LastName" >
                                            <Feedback><ValidationError /></Feedback>
                                        </TextEdit>
                                    </FieldBody>
                                </Field>
                            </Validation>
                        </Fields>
                        <Validation>
                            <Field Horizontal="true">
                                <FieldLabel ColumnSize="ColumnSize.Is2">Email</FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is10">
                                    <TextEdit Placeholder="Enter Email" @bind-Text="model.User.Email" Role="TextRole.Email">
                                        <Feedback><ValidationError /></Feedback>
                                    </TextEdit>
                                </FieldBody>
                            </Field>
                        </Validation>
                        <Validation>
                            <Field Horizontal="true">
                                <FieldLabel ColumnSize="ColumnSize.Is2">Phone</FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is10">
                                    <TextEdit Placeholder="Enter Phone Number" @bind-Text="model.User.PhoneNumber" 
                                              MaxLength="13" MaskType="MaskType.RegEx" EditMask="^[+84]?[0-9]*$">
                                        <Feedback><ValidationError /></Feedback>
                                    </TextEdit>
                                </FieldBody>
                            </Field>
                        </Validation>
                    </Validations>
                
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
                <Button Color="Color.Primary" Clicked="@(async () => await SaveChangeAsync())">
                    Save Changes
                </Button>
            </ModalFooter>
        </form>
        <Snackbar @ref="snackbar" Color="SnackbarColor.Danger" Location="SnackbarLocation.Right">
            <SnackbarBody>
                The input data is invalid.
            </SnackbarBody>
        </Snackbar>


    </ModalContent>
</Modal>

@code {
    [Parameter]
    public EventCallback OnSaveChange { get; set; }

    // reference to the modal component
    public Modal modalRef;
    public string modalTitle = "";

    EmployeeRequestModel model;

    Validations validations;

    Snackbar snackbar;

    protected override void OnInitialized()
    {
        model = new EmployeeRequestModel();
        //model.User = new ApplicationUserModel();
    }

    private async Task SaveChangeAsync()
    {
        if (validations.ValidateAll())
        {

            if (String.IsNullOrWhiteSpace(model.Id))
            {
                await service.AddAsync(model);
                await OnSaveChange.InvokeAsync();
            }
            else
            {

                await service.UpdateAsync(model.Id, model);
                await OnSaveChange.InvokeAsync();
            }
            HideModal();
        }
        else
        {
            snackbar.Show();
        }
    }

    public void AddModal()
    {
        model = new EmployeeRequestModel();
        //model.User = new ApplicationUserModel();
        modalTitle = "Add employee";
        modalRef.Show();
    }

    public async Task<EmployeeRequestModel> GetById(string id)
    {
        var responseModel = await service.GetByIdAsync(id);
        return _mapper.Map<EmployeeRequestModel>(responseModel);
    }

    public void EditModal(string employeeId)
    {
        modalTitle = "Edit employee";

        //model = await GetById(employeeId);

        modalRef.Show();
    }

    public void HideModal()
    {
        modalRef.Hide();
    }

}
