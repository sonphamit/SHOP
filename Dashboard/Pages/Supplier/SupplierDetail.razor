@inject ISupplierService service
@implements IDisposable

<Modal @ref="modalRef">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <form method="post">
            <ModalHeader>
                <ModalTitle>@modalTitle</ModalTitle>
                <CloseButton Clicked="@HideModal" />
            </ModalHeader>
            <ModalBody>
                <Field>
                    <FieldLabel>Name</FieldLabel>
                    <TextEdit Placeholder="Enter name..." @bind-Text="model.CompanyName" />
                </Field>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
                <Button Color="Color.Primary" Clicked="@(async ()=> await SaveChangeAsync())">Save Changes</Button>
            </ModalFooter>
        </form>
    </ModalContent>
</Modal>


@code {
    [Parameter] public EventCallback OnSaveChange { get; set; }

    // reference to the modal component
    public Modal modalRef;
    public string modalTitle = "";

    SupplierModel model;
    protected override void OnInitialized()
    {
        model = new SupplierModel();
    }

    private async Task SaveChangeAsync()
    {
        if (String.IsNullOrWhiteSpace(model.Id))
        {
            await service.AddAsync(model);
        }
        else
        {
            await service.UpdateAsync(model.Id, model);
        }

        await OnSaveChange.InvokeAsync();

        HideModal();

    }

    public void AddModal()
    {
        model = new SupplierModel();
        modalTitle = "Add Supplier";
        modalRef.Show();
    }

    public void EditModal(SupplierModel model)
    {
        modalTitle = "Edit Supplier";
        this.model = model;
        modalRef.Show();
    }

    public void HideModal()
    {
        //modalRef.Dispose();
        this.Dispose();
        modalRef.Hide();
    }

    public void Dispose()
    {
        Debug.Print("Disposed");
    }

}
